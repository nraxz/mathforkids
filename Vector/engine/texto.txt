A 2D vector has two values (x and y), and it basically says how far you go from the point of origin in the x- and in the y-direction. For example, a vector of (3,4) goes 3 units in x direction and 4 units in the y direction, resulting in an angled line with a length of 5 (3² + 4² = 9+16 = 25, root of that is 5). So the vector basically gives you two pieces of information:  1) Direction and  2) length  If you now want to calculate where an object moves, you take direction * speed, but you have to normalise the vector to the length of 1 so it doesn't skew your results. If you used the above vector as is, it would multiply your speed by 5 (its length), so your object would move five times as fast as intended. If you have a normalised vector with a length of 1, the 1 is neutral in multiplications and doesn't cause you any trouble.  I'm sure there are more technical explanations, but that's the gist of it

Um vetor 2D tem dois valores (xey), e basicamente diz até onde você vai do ponto de origem em x e na direção y. Por exemplo, um vetor de (3, 4) vai 3 unidades na direção x e 4 unidades na direção y, resultando em uma linha angulada com um comprimento de 5 (3² + 4² = 9 + 16 = 25, raiz do que é 5). Então, o vetor basicamente dá-lhe duas informações: 1) Direção e 2) Comprimento Se você agora deseja calcular onde um objeto se move, você pega direção * velocidade, mas você tem que normalizar o vetor para o comprimento de 1 para que ele doesn 'T desviar seus resultados. Se você usou o vetor acima como está, ele multiplicaria sua velocidade por 5 (seu comprimento), então seu objeto se moveria cinco vezes mais rápido do que se pretendia. Se você tem um vetor normalizado com um comprimento de 1, o 1 é neutro em multiplicações e não causa qualquer problema. Tenho certeza que há mais explicações técnicas, mas essa é a essência dele